# vim: set ft=sh:

fdt addr ${fdt_addr} && fdt get value bootargs /chosen bootargs

test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "A R"
test -n "${BOOT_A_LEFT}" || setenv BOOT_A_LEFT 3
test -n "${BOOT_R_LEFT}" || setenv BOOT_R_LEFT 3
test -n "${BOOT_DEV}" || setenv BOOT_DEV "mmc 0:1"

setenv bootpart
setenv raucslot

for BOOT_SLOT in "${BOOT_ORDER}"; do
  if test "x${bootpart}" != "x"; then
    # skip remaining slots
  elif test "x${BOOT_SLOT}" = "xA"; then
    if itest ${BOOT_A_LEFT} -gt 0; then
      setexpr BOOT_A_LEFT ${BOOT_A_LEFT} - 1
      echo "Found valid RAUC slot A"
      setenv bootpart "/dev/mmcblk0p2"
      setenv raucslot "A"
      setenv BOOT_DEV "mmc 0:2"
      fatload mmc 0:1 ${kernel_addr_r} Image
    fi
  elif test "x${BOOT_SLOT}" = "xR"; then
    if itest ${BOOT_R_LEFT} -gt 0; then
      setexpr BOOT_R_LEFT ${BOOT_R_LEFT} - 1
      echo "Found valid RAUC slot R"
      setenv bootpart "/dev/mmcblk0p3"
      setenv raucslot "R"
      setenv BOOT_DEV "mmc 0:3"
      ext4load ${BOOT_DEV} ${kernel_addr_r} Image
      ext4load ${BOOT_DEV} ${ramdisk_addr_r} initramfs-recovery
    fi
  fi
done

if test -n "${bootpart}"; then
  setenv bootargs "${bootargs} root=${bootpart} rauc.slot=${raucslot}"
  saveenv
else
  echo "No valid RAUC slot found. Resetting tries to 3"
  setenv BOOT_A_LEFT 3
  setenv BOOT_R_LEFT 3
  saveenv
  reset
fi

if test ! -e mmc 0:1 uboot.env; then saveenv; fi;

if test "x${raucslot}" = "xR"; then
  booti ${kernel_addr_r} ${ramdisk_addr_r} ${fdt_addr}
else
  booti ${kernel_addr_r} - ${fdt_addr}
fi
